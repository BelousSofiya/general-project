<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:tracing="http://www.mulesoft.org/schema/mule/tracing" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:os="http://www.mulesoft.org/schema/mule/os" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd 
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/current/mule-mongo.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd
http://www.mulesoft.org/schema/mule/tracing http://www.mulesoft.org/schema/mule/tracing/current/mule-tracing.xsd">
	<vm:config name="VM_Config" doc:name="VM Config" doc:id="9f39f215-386a-48b8-be07-d95d74ac9c89" >
		<vm:queues >
			<vm:queue queueName="TestQ" />
		</vm:queues>
	</vm:config>
	<flow name="launches-publish-to-iterator" doc:id="d9c94e11-61d6-44c1-8733-594b114ee94c" >
		<vm:publish queueName="TestQ" doc:name="Publish to Launches-Iterator" doc:id="b357e3c6-7bdb-42dd-b21f-367e4ee92cd1" config-ref="VM_Config" timeout="25" />
		<logger level="INFO" doc:name="Logger1" doc:id="7f8f195e-1002-44e1-a0f3-1621b1e9670f" message="#[payload]"/>
	</flow>
	<flow name="Launches-Iterator" doc:id="4869c0cf-ac36-4755-bfb7-d2c4923be6ad" >
		<vm:listener doc:name="Listener" doc:id="c6eb1adc-a775-45c6-9798-78afe86dcef6" config-ref="VM_Config" queueName="TestQ"/>
		<flow-ref doc:name="Flow Reference" doc:id="e898e3c1-6aa3-4ff0-ae3d-b3b1b9062c42" name="launches-spacexData"/>
		<set-payload value="#[vars.spacexData.records]" doc:name="Set Payload" doc:id="e5d9a0c7-cdef-4cb3-b9da-bbc928af97cc" />
		<batch:job jobName="launches-listenerBatch_Job1" doc:id="6b38c890-578e-486b-a614-b721516436cb" blockSize="2" maxFailedRecords="2">
			<batch:process-records >
				<batch:step name="Batch_Step" doc:id="e8704c02-8a8d-4390-806d-a6fbf497f0e1" acceptPolicy="ALL">
					<set-variable value="#[payload]" doc:name="Set Variable" doc:id="9eb912a1-9d8c-42dc-b306-0f757028a771" variableName="currentRecord"/>
					<set-variable doc:name="Set requestId" doc:id="af9661e2-7ed3-4f69-a3e8-baa2278007f7" variableName="requestId" value='#[vars.currentRecord.id]' />
					
					<logger level="INFO" doc:name="Logger" doc:id="7ccc2f1e-baaa-441a-9dd5-3fb1f2e2c384" message="#[payload]" />
					<http:request method="GET" doc:name="Request to get Rocket Name" doc:id="99516cf6-f4cd-4939-926f-9802eb1edf4b" url="#['http://ua-1185-spacex-system-api.us-e2.cloudhub.io/api/rockets/' ++ vars.currentRecord.rocket]" />
					<set-variable value='#[payload.name]' doc:name="Set rocketName" doc:id="502849b3-c35a-4542-8b37-9551d14a08de" variableName="rocketName" />
					<flow-ref doc:name="Flow Reference" doc:id="a6d74c7d-084e-4150-8deb-656994982934" name="launches-getDbData" />
					<ee:transform doc:name="Filter spaceXrecords and set data for report" doc:id="f65588cf-26ea-4ce5-b0b4-c19757583a90">
						<ee:message>
							<ee:set-payload><![CDATA[%dw 2.0
output application/json

var launche = vars.currentRecord
var mongoData = vars.mongoData.result
var MySQLData = vars.MySQLData.result
var SalesforceData = vars.SalesforceData.result

var noResultCheck = "No result for provided id"
var checkNoResult = (data) -> (data) == noResultCheck

// Function to check if an update is required
var updateRequired = (sourceData, targetData) -> 
    targetData != noResultCheck and (
        ((sourceData.name default "") as String != (targetData.name default "") as String) or
        ((sourceData.date_utc default "") as String != (targetData.date_utc default "") as String) or
        ((sourceData.details default "") as String != (targetData.details default "") as String) or
        ((sourceData.success default "") as String != (targetData.success default "") as String) or
        ((vars.rocketName default "") as String != (targetData.rocketName default "") as String)
    )

// Function to create a record with updated fields
var createRecord = (sourceData, targetData, idField) -> 
    {
        updateRequired: updateRequired(sourceData, targetData),
        id: targetData[idField],
        name: if ((sourceData.name default "") as String != (targetData.name default "") as String) 
                sourceData.name else null,
        date_utc: if ((sourceData.date_utc default "") as String != (targetData.date_utc default "") as String) 
                    sourceData.date_utc else null,
        details: if ((sourceData.details default "") as String != (targetData.details default "") as String) 
                    sourceData.details else null,
        success: if ((sourceData.success default "") as String != (targetData.success default "") as String) 
                    sourceData.success else null,
        rocket: if ((vars.rocketName default "") as String != (targetData.rocketName default "") as String) 
                    vars.rocketName else null
    } filterObject ((value, key) -> value != null)

// Function to create a report of updated fields
var createReport = (sourceData, targetData, createNew) ->
    if (createNew) {
       id:    (sourceData.id as String) ++
            ", name: " ++ sourceData.name ++
            ", date_utc: " ++ sourceData.date_utc ++
            ", details: " ++ sourceData.details ++
            ", success: " ++ (sourceData.success as String) ++
            ", rocket: " ++ vars.rocketName ++
            ", docType: Launch" ++
            ", action: Created"
    } else if (updateRequired(sourceData, targetData)) {
        id: sourceData.id,
        docType: "Launch",
        action: "Updated",
        updatedFields: {
            name: if ((sourceData.name default "Null") as String != (targetData.name default "") as String) 
                     (targetData.name default "Null") ++ " -> " ++ (sourceData.name default "") else null,
            date_utc: if ((sourceData.date_utc default "Null") as String != (targetData.date_utc default "") as String) 
                     (targetData.date_utc default "Null") ++ " -> " ++ (sourceData.date_utc default "") else null,
            details: if ((sourceData.details default "Null") as String != (targetData.details default "") as String) 
                     (targetData.details default "Null") ++ " -> " ++ (sourceData.details default "") else null,
            success: if ((sourceData.success default "Null") as String != (targetData.success default "") as String) 
                     (targetData.success default "Null") ++ " -> " ++ (sourceData.success default "") else null,
            rocket: if ((vars.rocketName default "Null") as String != (targetData.rocketName default "") as String) 
                     (targetData.rocketName default "Null") ++ " -> " ++ (vars.rocketName default "") else null
        } filterObject ((value, key) -> value != null)
    } else null

// Function to generate update data
var generateUpdateData = (record) -> 
    record filterObject ((value, key) -> key != "updateRequired" and key != "id")

// Determine operation status for each record
var mongoOperationStatus = if (checkNoResult(mongoData)) "Create" else if (updateRequired(launche, mongoData)) "Update" else "No action needed"
var MySQLOperationStatus = if (checkNoResult(MySQLData)) "Create" else if (updateRequired(launche, MySQLData)) "Update" else "No action needed"
var SalesforceOperationStatus = if (checkNoResult(SalesforceData)) "Create" else if (updateRequired(launche, SalesforceData)) "Update" else "No action needed"

---
{
    operationStatus: {
        mongoDB: mongoOperationStatus,
        MySQL: MySQLOperationStatus,
        Salesforce: SalesforceOperationStatus
    },
    spacexRecordMongo: if (mongoOperationStatus == "Update") {
         Data: generateUpdateData(createRecord(launche, mongoData, "_id")),
        report: createReport(launche, mongoData, false)
    } else null,
    
    spacexRecordMySQL: if (MySQLOperationStatus == "Update") {
           Data: generateUpdateData(createRecord(launche, MySQLData, "id")),
        report: createReport(launche, MySQLData, false)
    } else null,
    
    spacexRecordSalesforce: if (SalesforceOperationStatus == "Update") {
         Data: generateUpdateData(createRecord(launche, SalesforceData, "id")),
        report: createReport(launche, SalesforceData, false)
    } else null
}
]]></ee:set-payload>
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="MySQLRecord" ><![CDATA[%dw 2.0
output application/json
var launche = vars.currentRecord
---
{
}]]></ee:set-variable>
							<ee:set-variable variableName="MongoRecord" ><![CDATA[%dw 2.0
output application/json
var launche = vars.currentRecord
---
{
}]]></ee:set-variable>
							<ee:set-variable variableName="SalesforceRecord" ><![CDATA[%dw 2.0
output application/json
var launche = vars.currentRecord
---
{
}]]></ee:set-variable>
						</ee:variables>
					
</ee:transform>
					<set-variable value="#[payload]" doc:name="Set Data" doc:id="9a4da97f-cb84-484c-90e9-33927572ffc0" variableName="DataRecords"/>
					<flow-ref doc:name="Flow Reference" doc:id="9d32a6bc-d6ed-42dc-9af3-4dac8bf91f21" name="launches-records" />
					<batch:aggregator doc:name="Batch Aggregator" doc:id="ec442e1b-af42-4a77-8a0c-b3a2b1bf2e3e" size="10" preserveMimeTypes="true">
						<set-variable value='#[%dw 2.0&#10;output application/json&#10;&#10;---&#10;payload filter ((item) -&gt; item.reportData.updatedFields.id != null)&#10;    map ((item) -&gt; {&#10;        (item.reportData.updatedFields.id): item.reportData.updatedFields&#10;    })]' doc:name="Set report Data" doc:id="fc6b6462-b8cb-478d-ad81-ca1630ca911a" variableName="reportData"/>
						<ee:transform doc:name="Set records" doc:id="17a72a30-1bba-46d9-8e52-d158f250b900" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json

---
payload 
    filter ((item) -> item.spacexRecord.updateRequired == true)
    map ((item) -> {
     //   "_id" :  item.spacexRecord."_id" ,
     "_id":   item.spacexRecord."_id"   ,
         "update": {
      "set": {
        rocket: {
            name: item.spacexRecord.rocket,
          //  id: item.spacexRecord.rocket.id
        },
        success: item.spacexRecord.success,
        details: item.spacexRecord.details,
        name: item.spacexRecord.name,
        date_utc: item.spacexRecord.date_utc,
        id: item.spacexRecord.id
        
        }}
        
        
    })
]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<logger level="INFO" doc:name="Logger1" doc:id="db140bca-645b-4cd0-a753-5b350aff45c4" message="#[payload]" />
					
</batch:aggregator>
					<logger level="INFO" doc:name="Logger1" doc:id="5cbe3085-853c-4e43-bada-946cdc3e1ce9" message="#[payload]"/>
					<logger level="INFO" doc:name="Logger" doc:id="bfde24b3-0bbb-471a-a91c-24bc805bfb37" message="#[payload]"/>
				</batch:step>
			</batch:process-records>
		</batch:job>
		<ee:transform doc:name="Transform Message" doc:id="249475bd-9798-4809-a648-8f6562875a0e">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
 
  payload.docs map {
        id: $.id,
        docType: "launch",
        name: $.name,
        success: $.success,
        details: $.details,
        date_utc: $.date_utc,
        rocket_id: $.rocket.id,
        rocket_name: $.rocket.name
}
 
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="a98d8c97-d458-4508-a421-efc3b48bd27d" message="#[payload]"/>
		<os:store doc:name="Store" doc:id="e0052f83-2609-41b8-b211-18210b0c72e1" key="pageNumber" objectStore="Object_store">
			<os:value><![CDATA[#[vars.pageNumber + 1]]]></os:value>
		</os:store>
		<logger level="INFO" doc:name="Logger" doc:id="2209df59-3329-4d6a-9959-492a3156ebea" message="#[attributes.StatusCode]"/>
		<choice doc:name="Choice" doc:id="9e7c1907-454c-497a-a73c-df906857dd6f" >
			<when expression="#[vars.hasNextPage == false]">
				<vm:publish queueName="TestQ" doc:name="Publish to Launches-Iterator" doc:id="4f1dd6be-80ae-4c53-85f6-2a0821d2f178" config-ref="VM_Config" timeout="25" />
			</when>
			<otherwise >
				<vm:publish queueName="TestQ" doc:name="Publish To FInal Que" doc:id="ffdc4f43-64d3-4a16-96e1-e1981b7bc297" config-ref="VM_Config" timeout="25" />
			</otherwise>
		</choice>
	</flow>
	<sub-flow name="launches-spacexData" doc:id="56cb9909-6eef-4ab6-895e-466f1e112d87" >
		<os:retrieve doc:name="Retrieve" doc:id="6fb5bee6-f3c5-46a8-9b97-9576ddaf8d64" key="pageNumber" objectStore="Object_store">
			<os:default-value><![CDATA[1]]></os:default-value>
		</os:retrieve>
		<set-variable value="#[payload]" doc:name="Set Page Number1" doc:id="4dc121a0-3e3c-4b10-a4e3-60a697bdf76e" variableName="pageNumber" />
		<http:request method="GET" doc:name="Request" doc:id="cf8a42f7-af69-4732-bdc4-0105e5ccee0f" url="http://space-x-system-api.us-e2.cloudhub.io/api/launches?">
			<http:query-params ><![CDATA[#[output application/java
---
{
	page : vars.pageNumber 
}]]]></http:query-params>
		</http:request>
		<set-variable value="#[%dw 2.0&#10;output application/json&#10;var spacexData = payload.docs&#10;---&#10;{&#10;  records: spacexData filter ((item) -&gt; &#10;    item.name != null and &#10;    item.date_utc != null and &#10;    item.details != null and &#10;    item.success != null and &#10;    item.rocket != null&#10;  ) map ((item) -&gt; &#10;    {&#10;      id: item.id,&#10;      name: item.name,&#10;      date_utc: item.date_utc,&#10;      details: item.details,&#10;      success: item.success,&#10;      rocket: item.rocket&#10;    }&#10;  )&#10;}]" doc:name="Set Data From spaceX" doc:id="7fa32138-0c41-410e-b6a3-d24403abc784" variableName="spacexData" />
		<set-variable value="#[payload.hasNextPage]" doc:name="Has Next Page" doc:id="b692348b-2954-4014-8852-cab154888b2f" variableName="hasNextPage" />
		<set-variable value="#[%dw 2.0&#10;output application/json&#10;var ids = payload.docs map ((doc) -&gt; doc.id)&#10;// var ids = payload.docs map ((doc) -&gt; doc.id ++ 1)&#10;---&#10;ids]" doc:name="Set ids" doc:id="d8eb5f29-0705-46ea-a1f4-9fbc7cf52cd2" variableName="ids" />
	</sub-flow>
	<sub-flow name="launches-getDbData" doc:id="5681c3b6-ef73-4dcc-9965-42876ad4d31a" >
		<set-variable value='#[%dw 2.0&#10;output application/xml&#10;ns soapenv http://schemas.xmlsoap.org/soap/envelope/&#10;ns tns http://www.example.com/rocketservice&#10;---&#10;{&#10;  soapenv#Envelope: {&#10;    soapenv#Header: null,&#10;    soapenv#Body: {&#10;      tns#GetLaunchByExternalIdRequest: {&#10;        tns#externalId: vars.requestId&#10;      }&#10;    },&#10;    &#10;    }&#10;    &#10;    }]' doc:name="Set Request Body for Mongo" doc:id="b46cfe4d-6557-4455-be48-e0416819967d" variableName="RequestBodyForMongo"/>
		<http:request method="POST" doc:name="Request To Mongo" doc:id="567f4f4f-b6f0-45a9-bba1-d041f14dc8ab" url="http://ua-1185-mongo-system-api.us-e2.cloudhub.io/api">
			<http:body><![CDATA[#[vars.RequestBodyForMongo]]]></http:body>
		</http:request>
		<logger level="INFO" doc:name="Logger" doc:id="7f134767-78af-423c-9289-c02bce75b450" message="#[payload]"/>
		<set-variable value='#[%dw 2.0&#10;output application/json&#10;ns soap http://schemas.xmlsoap.org/soap/envelope/&#10;ns roc http://example.com/rocketservice&#10;&#10;var responsePayload = payload.soap#Envelope.soap#Body.roc#GetByExternalIdResponse&#10;---&#10;{&#10;  result: &#10;    if (responsePayload is String and responsePayload == "No result for provided id") &#10;      "No result for provided id" &#10;    else &#10;      {&#10;        id: responsePayload.roc#Launch.externalId,&#10;        docType: responsePayload.roc#Launch.docType,&#10;        launchName: responsePayload.roc#Launch.launchName default null,&#10;        success: responsePayload.roc#Launch.success as String,&#10;        details: responsePayload.roc#Launch.details,&#10;        date: responsePayload.roc#Launch.date,&#10;        rocketName: responsePayload.roc#Launch.rocketName&#10;      }&#10;}]' doc:name="Set Data From MongoDB" doc:id="ef34be43-b9e8-4ad0-8be8-9dc27e74f096" variableName="mongoData" />
		<set-variable value="#[%dw 2.0&#10;output application/xml&#10;ns soapenv http://schemas.xmlsoap.org/soap/envelope/&#10;ns roc http://example.com/rocketservice&#10;---&#10;{&#10;  soapenv#Envelope: {&#10;    soapenv#Header: null,&#10;    soapenv#Body: {&#10;      roc#GetLaunchByExternalIdRequest: {&#10;        externalId: vars.requestId&#10;      }&#10;    }&#10;  }&#10;}]" doc:name="Set Request Body for MySQL" doc:id="c7c5c1a2-8637-4fb0-af06-610e25a96799" variableName="RequestBodyForMySQL" />
		<http:request method="POST" doc:name="Request To MySQl" doc:id="72fbfe2f-ad7b-4b61-9694-044f2cd9ee7e" url="http://ua-1185-mysql-system-api.us-e2.cloudhub.io/SpaceXdbService/SpaceXdbServiceSoapPort">
			<http:body><![CDATA[#[vars.RequestBodyForMySQL]]]></http:body>
		</http:request>
		<set-variable value='#[%dw 2.0&#10;output application/json&#10;ns soap http://schemas.xmlsoap.org/soap/envelope/&#10;&#10;var responsePayload = payload.soap#Envelope.soap#Body.soap#GetLaunchByExternalIdResponse&#10;---&#10;{&#10;  result: &#10;    if (responsePayload.id == null) &#10;      "No result for provided id" &#10;    else &#10;      {&#10;        id: responsePayload.externalId,&#10;        launchName: responsePayload.launchName default null,&#10;        success: if (responsePayload.success == null) null else responsePayload.success as String,&#10;        details: responsePayload.details,&#10;        date: responsePayload.date,&#10;        rocketName: responsePayload.rocketName&#10;      }&#10;}]' doc:name="Set Data From MySQL" doc:id="30ad400b-6eb8-4107-ba49-ef7c02c933b2" variableName="MySQLData" />
		<logger level="INFO" doc:name="Logger1" doc:id="ac5a2805-c75c-45b7-a3fc-07cd62f8ba4e" message="#[payload]" />
		<set-variable value='#[%dw 2.0&#10;output application/json&#10;&#10;---&#10;{&#10;  result: &#10;    if (payload.id == null) &#10;      "No result for provided id" &#10;    else &#10;      {&#10;        id: payload.id,&#10;        launchName: payload.name default null,&#10;        success: if (payload.success == null) null else payload.success as String,&#10;        details: payload.details,&#10;        date: payload.date_utc,&#10;        rocketName: payload.rocket,&#10;        DateUtc: payload.static_fire_date_utc&#10;      }&#10;}]' doc:name="Set Data From Salesforce" doc:id="947a3690-a310-4bec-851e-8150acb6d83c" variableName="SalesforceData" />
		<logger level="INFO" doc:name="Logger2" doc:id="94fcc008-574f-4188-ac46-d49a0ccd47b8" message="#[payload]" />
	</sub-flow>
	<sub-flow name="launches-listenerSub_Flow" doc:id="7434d987-28db-47a4-bda6-4262e6e38b0e" >
		<http:request method="GET" doc:name="Request To Salesforce" doc:id="74634bfd-7179-4d8f-8f49-61fa0a0deebf" url="#['http://ua-1185-salesforce-system-api.us-e2.cloudhub.io/contracts/' ++ vars.requestId]">
		</http:request>
	</sub-flow>
	<sub-flow name="launches-records" doc:id="927c529e-a93a-46dc-b2fe-29f0cec8b84e" >
		<choice doc:name="Choice" doc:id="6b53c117-7453-4770-9e9f-37911c24c78e" >
			<when expression='#[vars.DataRecords.operationStatus.mongoDB == "Create"]'>
				<set-variable value='#[%dw 2.0&#10;output application/xml&#10;ns soapenv http://schemas.xmlsoap.org/soap/envelope/&#10;ns roc http://example.com/rocketservice&#10;---&#10;soapenv#Envelope: {&#10;    soapenv#Header: {},&#10;    soapenv#Body: {&#10;        roc#CreateLaunchRequest: {&#10;            externalId: vars.currentRecord.id,&#10;            docType: "Launch",&#10;            launchName: vars.currentRecord.name,&#10;            success: if (vars.currentRecord.success) "1" else "0",&#10;            details: vars.currentRecord.details,&#10;            date: vars.currentRecord.date_utc as String,&#10;            rocketName: vars.rocketName&#10;        }&#10;    }&#10;}]' doc:name="Set MongoDataForCreate" doc:id="4d7c2380-b397-4289-b41d-7be5a3ef684d" variableName="MongoDataForCreate"/>
				<http:request method="POST" doc:name="Request To Mongo" doc:id="ef8fd3dd-0d06-4da4-94c0-f440f2c4a8ca" url="http://ua-1185-mongo-system-api.us-e2.cloudhub.io/api" >
					<http:body ><![CDATA[#[vars.MongoDataForCreate]]]></http:body>
				</http:request>
				<logger level="INFO" doc:name="Logger" doc:id="05ca72a2-e1bb-472d-85ae-77fe96f8bdf2" message="#[payload]" />
			
</when>
			<when expression='#[vars.DataRecords.operationStatus.mongoDB == "Update"]'>
				<set-variable value='#[%dw 2.0&#10;output application/xml&#10;ns soapenv http://schemas.xmlsoap.org/soap/envelope/&#10;ns roc http://example.com/rocketservice&#10;&#10;var record = vars.DataRecords.spacexRecordMongo.Data&#10;&#10;---&#10;soapenv#Envelope: {&#10;  soapenv#Header: null,&#10;  soapenv#Body: {&#10;    roc#UpdateLaunchRequest: {&#10;      "externalId" : vars.currentRecord.id,&#10;      docType: "Launch",&#10;      (if (record.name? and record.name != null) "launchName" : record.name else null),&#10;      (if (record.success? and record.success != null) "success" : (if (record.success as String default false) 1 else 0) else null),&#10;      (if (record.details? and record.details != null) "details" : record.details else null),&#10;      (if (record.date_utc? and record.date_utc != null) "date" : record.date_utc else null),&#10;      (if (record.rocket? and record.rocket != null) "rocketName" : record.rocket else null)&#10;    }&#10;  }&#10;}]' doc:name="Set MongoDataForCreate" doc:id="613a6f08-465e-4020-b218-42385d7653d2" variableName="MongoDataForCreate" />
				<http:request method="POST" doc:name="Request To Mongo" doc:id="2dc34f10-6b8c-4875-9a04-b4dbabf912f1" url="http://ua-1185-mongo-system-api.us-e2.cloudhub.io/api" >
					<http:body ><![CDATA[#[vars.MongoDataForCreate]]]></http:body>
				</http:request>
				<logger level="INFO" doc:name="Logger" doc:id="31211714-c3dd-4b97-91f1-6e3502efbf33" message="#[payload]" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="c67381a4-c549-42d9-9921-561f3f1660df" message="#[payload]" />
			</otherwise>
		
</choice>
		<choice doc:name="Choice1" doc:id="bf881ac1-592a-4400-b2c2-4f2b6b330347" >
			<when expression='#[vars.DataRecords.operationStatus.MySQL == "Create"]' >
				<set-variable value='#[%dw 2.0&#10;output application/xml&#10;ns soapenv http://schemas.xmlsoap.org/soap/envelope/&#10;ns roc http://example.com/rocketservice&#10;&#10;var record = vars.currentRecord&#10;&#10;---&#10;soapenv#Envelope: {&#10;  soapenv#Header: {},&#10;  soapenv#Body: {&#10;    roc#CreateLaunchRequest: {&#10;      externalId: record.id,&#10;      success: if (vars.currentRecord.success) "1" else "0",&#10;      details: record.details,&#10;      launchName: record.name,&#10;      date: record.date_utc as String,&#10;      rocketName: vars.rocketName&#10;    }&#10;  }&#10;}]' doc:name="Set Variable" doc:id="cb1e2306-da45-4c22-9f2a-d6887f01bbd5" variableName="MySQLDataForCreate" />
				<http:request method="POST" doc:name="Request To MySQl" doc:id="c13d3ea8-393b-487a-b374-cce065ed904c" url="http://ua-1185-mysql-system-api.us-e2.cloudhub.io/SpaceXdbService/SpaceXdbServiceSoapPort" >
					<http:body ><![CDATA[#[vars.MySQLDataForCreate]]]></http:body>
				</http:request>
				<logger level="INFO" doc:name="Logger" doc:id="8ee58cf2-1846-457e-96a7-46afd6d1a448" message="#[payload]" />
			
</when>
			<when expression='#[vars.DataRecords.operationStatus.MySQL == "Update"]' >
				<set-variable value='#[%dw 2.0&#10;output application/xml&#10;ns soapenv http://schemas.xmlsoap.org/soap/envelope/&#10;ns roc http://example.com/rocketservice&#10;&#10;var record = vars.DataRecords.spacexRecordMySQL.Data&#10;&#10;---&#10;soapenv#Envelope: {&#10;  soapenv#Header: {},&#10;  soapenv#Body: {&#10;    roc#UpdateLaunchRequest: {&#10;      "externalId" : vars.currentRecord.id,&#10;      (if (record.name? and record.name != null) "launchName" : record.name else null),&#10;      (if (record.success? and record.success != null) "success" : (if (record.success as String default false) 1 else 0) else null),&#10;      (if (record.details? and record.details != null) "details" : record.details else null),&#10;      (if (record.date_utc? and record.date_utc != null) "date" : record.date_utc as String  else null),&#10;      (if (record.rocket? and record.rocket != null) "rocketName" : record.rocket else null)&#10;    }&#10;  }&#10;}]' doc:name="Set Variable" doc:id="40de2304-c863-4e79-b83e-066b069dc918" variableName="MySQLDataForCreate" />
				<http:request method="POST" doc:name="Request To MySQl" doc:id="ae5dd15b-fe78-4414-ac97-4ae6da777a04" url="http://ua-1185-mysql-system-api.us-e2.cloudhub.io/SpaceXdbService/SpaceXdbServiceSoapPort" >
					<http:body ><![CDATA[#[vars.MySQLDataForCreate]]]></http:body>
				</http:request>
				<logger level="INFO" doc:name="Logger" doc:id="a5cd1df8-0a1a-4cd4-9da9-ba302eecb1d9" message="#[payload]" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="0eb4b5ab-581a-4fdc-853b-0f16d311733c" message="#[payload]" />
			</otherwise>
		
</choice>
	
	</sub-flow>
</mule>
